name: Rust

on:
  push:
    branches: [main, release/**]
  pull_request:

env:
  RUSTFLAGS: -Dwarnings -Dclippy::all -Dclippy::pedantic

defaults:
  run:
    shell: bash

jobs:

  complete:
    if: always()
    needs: [fmt, rust-analyzer-compat, build-and-test, publish-dry-run]
    runs-on: ubuntu-latest
    steps:
    - if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
      run: exit 1

  fmt:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: rustup update
    - run: cargo fmt --all --check

  rust-analyzer-compat:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: rustup update
    - run: rustup +nightly component add rust-analyzer
    - name: Check if rust-analyzer encounters any errors parsing project
      run: rustup run nightly rust-analyzer analysis-stats . 2>&1 | (! grep ERROR)

  build-and-test:
    strategy:
      matrix:
        include:
        - os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
        - os: ubuntu-latest
          target: aarch64-unknown-linux-gnu
        - os: macos-latest
          target: x86_64-apple-darwin
        - os: macos-latest
          target: aarch64-apple-darwin
        - os: windows-latest
          target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - uses: stellar/actions/rust-cache@main
    - run: rustup update
    - run: rustup target add ${{ matrix.target }}
    - run: rustup target add wasm32-unknown-unknown
    - if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: sudo apt-get update && sudo apt-get -y install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
    - run: cargo clippy --all-targets --target ${{ matrix.target }}
    - run: make build-test
    - if: startsWith(matrix.target, 'x86_64')
      # specify directories explicitly to avoid building the preflight library (otherwise it will fail with missing symbols)
      run: |
        for I in cmd/soroban-cli cmd/crates/soroban-test cmd/crates/soroban-test/tests/fixtures/test-wasms/hello_world ; do
          cargo test --target ${{ matrix.target }} --manifest-path $I/Cargo.toml
        done
  publish-dry-run:
    if: github.event_name == 'push' || startsWith(github.head_ref, 'release/')
    strategy:
      matrix:
        include:
        - os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
        - os: ubuntu-latest
          target: aarch64-unknown-linux-gnu
        - os: macos-latest
          target: x86_64-apple-darwin
        - os: macos-latest
          target: aarch64-apple-darwin
        - os: windows-latest
          target: x86_64-pc-windows-msvc
    uses: stellar/actions/.github/workflows/rust-publish-dry-run.yml@main
    with:
      runs-on: ${{ matrix.os }}
      target: ${{ matrix.target }}
