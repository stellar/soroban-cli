// Code generated by go-bindata. DO NOT EDIT.
// sources:
// default.toml (825B)

package config

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaultToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x41\x4f\xdc\x3c\x10\xbd\xfb\x57\x8c\xf2\x5d\xbe\x1e\xe8\x86\x65\x45\x11\x15\x87\x34\x3b\xbb\x89\xc8\xc6\xc1\x76\xa0\xb4\xaa\x2c\x93\xf5\x92\xa8\xd9\x78\x1b\x3b\x94\xfe\xfb\xca\x86\x22\xa4\xa2\xde\xac\xf7\x66\xe6\xbd\x79\x9e\x34\xc3\xf4\xb2\xa2\x79\x29\xe4\x8a\xe1\x55\x8d\x65\x7a\x0b\x17\x70\xba\x20\x29\x65\x18\x10\x2e\xa4\xc8\x37\x48\x6b\x01\x17\x10\xcd\x6d\x44\x96\xb8\x4a\xea\x42\x48\xbc\xc6\x52\x70\x59\xe4\x9b\xdc\x73\xc7\x71\x4c\xb0\x5c\x86\x69\xbe\xb4\x37\x8d\xea\x5b\x63\xdd\xf9\x59\x1c\xc7\x11\x09\xe5\xb2\xc0\xe5\x1a\x99\x64\x28\xb0\x14\x39\x2d\xe5\x4d\x5e\x2e\xe9\x8d\xef\xff\x30\x3f\x8b\x49\x5e\xae\x91\x07\xe2\x95\xea\x49\xbc\x8f\x48\x41\xd7\x72\x45\xd9\x26\x09\x90\xd3\x8f\xee\x09\x2b\xf0\x1a\x0b\x0f\x75\xc3\xce\x44\x64\x93\x7c\x7e\xc3\x59\x1c\x07\x22\xc3\xa4\x10\xd9\xed\x1f\x17\x45\x22\x9e\x37\x8e\x4e\x62\x1b\x11\xf2\x1f\x94\xda\xfd\x34\xe3\x77\xa8\x94\xb5\x87\x76\x54\x56\x7b\x10\xc5\x0d\x65\x97\xb2\x4a\x38\xaf\x32\x96\x70\xf4\x2d\x42\x5b\x07\x7c\xb9\x82\xd5\xe4\xa6\x51\xbf\xb4\x7e\x04\xda\x38\x73\xa7\x47\x98\xc7\xf3\x79\x98\x9a\xb6\x6a\xb8\xd7\xe0\x5a\x6d\x35\x38\xe3\x1f\x30\x4c\x7b\x5f\x63\x76\x90\x56\xb5\x85\x5f\x66\x82\x56\x3d\x78\xb9\x8a\xe1\xaa\xc8\xd7\x99\x90\x5e\x15\x99\x4c\x69\x1d\x32\x5d\xbc\x45\x5e\xd5\x58\xa3\xe4\xf9\x17\x0c\x15\x84\x5f\x15\xb9\x40\xb9\xfc\x24\xab\x44\x64\xde\xa8\x35\xa3\xb9\x53\x83\x1c\x0f\xcd\x7b\xfb\xa3\xef\x9c\x8e\x88\x60\x49\xc9\x93\x34\x24\xfd\x8f\x3f\x59\x2c\x62\xef\x9f\x6b\x07\x6a\x00\xfd\x78\xe8\xbb\xa6\x73\xd0\xa8\x83\xeb\x1e\xf4\x51\x63\x46\x0d\xd6\x99\x51\xdd\x6b\x38\x28\xd7\xfa\x5d\x93\x4a\xe4\xd7\x28\xfd\x05\x49\x2e\x28\x4b\xd6\xf8\x62\x65\xa6\x5d\x33\xb3\x4e\xf7\xbd\x1a\x67\xcf\xbe\x8e\xc6\x43\x33\x7b\x3d\x31\x44\x26\xe8\x92\x9e\x43\x3e\x34\xfd\xb4\xd5\xa0\xfa\x1e\x76\x9d\xee\xb7\x16\x5a\x3d\x6a\xf8\xbf\x31\xfb\xbd\x1e\x9c\xde\xbe\x03\x65\x41\xc1\xce\x8c\x7b\x9f\xe5\xd6\x34\x93\x27\x94\xeb\xcc\x40\xc8\x57\x2e\xb0\x28\x12\x16\xdc\x7c\x23\x99\x10\x95\xac\x28\x0b\x57\x71\x7c\x3a\x3f\xfd\x5b\xc9\x7f\xcd\xb3\x19\x08\xeb\x35\x66\xd8\x75\xf7\xb0\xd5\x3b\x35\xf5\xee\x49\x9f\xfc\x0e\x00\x00\xff\xff\xb6\x54\x6f\x7f\x39\x03\x00\x00")

func defaultTomlBytes() ([]byte, error) {
	return bindataRead(
		_defaultToml,
		"default.toml",
	)
}

func defaultToml() (*asset, error) {
	bytes, err := defaultTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "default.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3f, 0xd8, 0x33, 0x81, 0x9e, 0x81, 0x45, 0x5, 0xcd, 0x95, 0xed, 0x40, 0x7d, 0x10, 0xd2, 0xdb, 0x5b, 0x4d, 0x1b, 0xb8, 0x19, 0x78, 0xeb, 0x5e, 0x75, 0x2f, 0x7, 0xa2, 0x84, 0x75, 0xe3, 0x51}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"default.toml": defaultToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"default.toml": &bintree{defaultToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
