// Code generated by go-bindata. DO NOT EDIT.
// sources:
// default.toml (826B)

package config

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaultToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x41\x4f\xdc\x3c\x10\xbd\xfb\x57\x8c\xc2\xe5\xfb\x0e\x74\xc3\xb2\xa2\x88\x8a\x43\x9a\x9d\xdd\x44\x64\xe3\x60\x3b\x50\x5a\x55\x96\xc9\x7a\x49\xd4\x6c\xbc\x8d\x1d\x4a\xff\x7d\x65\x97\x22\xa4\xa2\xde\xac\xf7\x66\xe6\xbd\x79\x9e\x34\xc3\xf4\xaa\xa2\x79\x29\xe4\x8a\xe1\x75\x8d\x65\x7a\x07\x97\x70\xb6\x20\x29\x65\x18\x10\x2e\xa4\xc8\x37\x48\x6b\x01\x97\x10\xcd\x6d\x44\x96\xb8\x4a\xea\x42\x48\xbc\xc1\x52\x70\x59\xe4\x9b\xdc\x73\x27\x71\x4c\xb0\x5c\x86\x69\xbe\xb4\x37\x8d\xea\x5b\x63\xdd\xc5\x79\x1c\xc7\x11\x09\xe5\xb2\xc0\xe5\x1a\x99\x64\x28\xb0\x14\x39\x2d\xe5\x6d\x5e\x2e\xe9\xad\xef\x7f\x3f\x3f\x8f\x49\x5e\xae\x91\x07\xe2\x95\xea\x69\xbc\x8f\xc8\x51\x41\xd7\x72\x45\xd9\x26\x09\x98\xd3\x4f\x2e\x22\x1e\x2b\xf0\x06\x0b\x0f\x75\xc3\xce\x44\x64\x93\x7c\x7a\xc3\x5a\x1c\x07\x22\xc3\xa4\x10\xd9\xdd\x1f\x1b\x45\x22\x9e\x57\x8e\x4e\x63\x1b\x11\x72\x04\xa5\x76\x3f\xcc\xf8\x0d\x2a\x65\xed\xa1\x1d\x95\xd5\x1e\x44\x71\x4b\xd9\x95\xac\x12\xce\xab\x8c\x25\x1c\x7d\x8b\xd0\xd6\x01\x5f\xae\x60\x35\xb9\x69\xd4\x2f\xad\x1f\x80\x36\xce\xdc\xeb\x11\xe6\xf1\x7c\x1e\xa6\xa6\xad\x1a\x1e\x34\xb8\x56\x5b\x0d\xce\xf8\x07\x0c\xd3\xde\xd7\x98\x1d\xa4\x55\x6d\xe1\xa7\x99\xa0\x55\x8f\x5e\xae\x62\xb8\x2a\xf2\x75\x26\xa4\x57\x45\x26\x53\x5a\x87\x50\x17\x6f\x91\xd7\x35\xd6\x28\x79\xfe\x19\x43\x05\xe1\xd7\x45\x2e\x50\x2e\x3f\xca\x2a\x11\x99\x37\x6a\xcd\x68\xee\xd5\x20\xc7\x43\xf3\xce\x7e\xef\x3b\xa7\x23\x22\x58\x52\xf2\x24\x0d\x51\xff\xe3\x53\x16\x8b\xd8\xfb\xe7\xda\x81\x1a\x40\x3f\x1d\xfa\xae\xe9\x1c\x34\xea\xe0\xba\x47\x7d\xdc\x98\x51\x83\x75\x66\x54\x0f\x1a\x0e\xca\xb5\x7e\xd7\xa4\x12\xf9\x0d\x4a\x7f\x42\x92\x0b\xca\x92\x35\xbe\x58\x99\x69\xd7\xcc\xac\xd3\x7d\xaf\xc6\xd9\xb3\xaf\xe3\xf1\xd0\xcc\x5e\x4f\x0c\x91\x09\xba\xa4\x17\x90\x0f\x4d\x3f\x6d\x35\xa8\xbe\x87\x5d\xa7\xfb\xad\x85\x56\x8f\x1a\xfe\x6b\xcc\x7e\xaf\x07\xa7\xb7\xff\x83\xb2\xa0\x60\x67\xc6\xbd\xcf\x72\x6b\x9a\xc9\x13\xca\x75\x66\x20\xe4\x0b\x17\x58\x14\x09\x0b\x6e\xbe\x92\x4c\x88\x4a\x56\x94\x85\xab\x38\x39\x9b\x9f\xfd\xad\xe4\xbf\xe6\xd9\x0c\x84\xf5\x1a\x33\xec\xba\x07\xd8\xea\x9d\x9a\x7a\xf7\x5b\x9f\xfc\x0a\x00\x00\xff\xff\x66\x88\x25\x2b\x3a\x03\x00\x00")

func defaultTomlBytes() ([]byte, error) {
	return bindataRead(
		_defaultToml,
		"default.toml",
	)
}

func defaultToml() (*asset, error) {
	bytes, err := defaultTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "default.toml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0x8d, 0x1d, 0x99, 0x8d, 0x89, 0x42, 0x9e, 0x92, 0x71, 0xfd, 0x6e, 0x37, 0xdc, 0x79, 0xe3, 0xb0, 0x27, 0x63, 0xe6, 0xa5, 0xd3, 0xdf, 0xb5, 0x19, 0x83, 0x13, 0x48, 0x15, 0xa0, 0x67, 0x81}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"default.toml": defaultToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"default.toml": &bintree{defaultToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
